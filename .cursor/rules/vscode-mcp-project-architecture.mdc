---
description: VSCode MCP Bridge 项目架构说明，包含项目背景、核心使命、架构设计和通信协议
alwaysApply: true
---

# VSCode MCP Bridge 项目架构

## 项目背景

**VSCode MCP Bridge** 是一个 monorepo 项目，提供了连接 VSCode 与 MCP (Model Context Protocol) 的完整解决方案，使 MCP 客户端能够访问丰富的 VSCode 上下文信息。

## 核心使命

**VSCode MCP Bridge 主要服务于 AI IDEs（如 Cursor）和 AI 编码助手**，帮助他们更高效地开发和分析代码。

### 设计动机

传统的 AI 编码助手在验证代码修改时经常需要执行耗时的命令：

- `tsc --noEmit` - TypeScript 类型检查
- `eslint .` - 代码风格检查
- `npm run build` - 项目构建

这些命令在大项目中运行缓慢，严重影响 AI 开发效率。VSCode MCP Bridge 提供实时 LSP (Language Server Protocol) 信息，让 AI 助手能够：

- **快速获取诊断** (`get-diagnostics`) - 替代耗时的类型检查和 lint 命令
- **访问实时类型信息** (`get-hover`) - 获取准确的类型定义，无需编译
- **高效代码导航** (`get-definition`, `get-references`) - 理解代码结构和依赖关系
- **智能文件操作** (`open-files`, `open-diff`) - 高效的代码审查和比较

### 核心优势

1. **实时性**: 利用 VSCode 的 LSP 获取实时代码状态，无需执行缓慢命令
2. **准确性**: 基于语言服务器的精确分析，比静态分析更可靠
3. **效率**: 显著减少 AI 编码助手的等待时间
4. **集成性**: 与 VSCode 生态系统深度集成，支持多种语言和扩展

## Monorepo 架构

```plaintext
MCP Client ↔ MCP Server ↔ IPC Layer ↔ VSCode Extension ↔ VSCode API
   stdio      Unix Socket    Types     Extension API
```

### 组件职责

**1. vscode-mcp-ipc** (IPC 通信层):

- **事件定义**: 使用 Zod 定义所有事件类型和 Schema 验证
- **类型安全**: 导出类型安全的 EventMap, EventParams, EventResult 类型
- **通信**: 提供 EventDispatcher 用于 Unix Socket 通信，支持超时处理
- **Socket 管理**: 基于工作区 hash 生成跨平台 socket 路径
- **Schema 验证**: 所有事件的集中化输入/输出验证 Schema
- **跨平台支持**: 处理 Windows 命名管道和 Unix socket

**2. vscode-mcp-bridge** (VSCode 扩展):

- **Socket 服务器**: SocketServer 类，支持服务注册和 Schema 验证
- **服务注册**: 模块化服务架构，支持类型安全的处理器
- **请求路由**: 将传入请求路由到相应的服务处理器
- **Schema 验证**: 验证请求负载和响应结果
- **错误处理**: 全面的错误处理和详细错误信息
- **生命周期管理**: 扩展激活/停用和资源清理
- **日志记录**: 结构化日志记录，用于调试和监控服务调用

**3. vscode-mcp-server** (MCP 服务器):

- **MCP 协议**: 实现标准 MCP 协议，使用 stdio 传输
- **工具注册**: 注册所有可用工具并定义适当的 Schema
- **请求转换**: 将 MCP 工具调用转换为 VSCode 扩展请求
- **Schema 复用**: 使用 `...InputSchema.shape` 模式复用 IPC Schema
- **错误处理**: 优雅的错误处理和用户友好的错误信息
- **输出格式化**: 使用状态图标和结构化输出格式化响应

### 通信协议

- **MCP Client ↔ MCP Server**: stdio + JSON-RPC 2.0
- **MCP Server ↔ IPC Layer**: TypeScript 导入和函数调用
- **IPC Layer ↔ VSCode Extension**: Unix Domain Sockets + JSON (无认证)

## 多窗口支持

### Socket 路径生成

Socket 路径在 IPC 层和 Extension 之间一致生成：

```typescript
// IPC 层：packages/vscode-mcp-ipc/src/dispatch.ts
export function getSocketPath(workspacePath: string): string {
  const hash = createHash('md5').update(workspacePath).digest('hex').slice(0, 8);
  return process.platform === 'win32'
    ? `\\\\.\\pipe\\vscode-mcp-${hash}`
    : join(tmpdir(), `vscode-mcp-${hash}.sock`);
}
```

**示例**:

- `/Users/user/frontend` → `/tmp/vscode-mcp-a1b2c3d4.sock`
- `/Users/user/backend` → `/tmp/vscode-mcp-e5f6g7h8.sock`

### 工作区定位

所有 MCP 工具都需要 `workspace_path` 参数来定位特定的 VSCode 实例。

## 开发工作流程

### 开发顺序（关键）

添加/修改工具时，必须按照以下顺序：

1. **IPC 层** ([packages/vscode-mcp-ipc/](mdc:packages/vscode-mcp-ipc/))
   - 定义 Schema 和类型
   - 更新 EventMap
   - 构建包: `npm run build`

2. **Extension 层** ([packages/vscode-mcp-bridge/](mdc:packages/vscode-mcp-bridge/))
   - 实现服务逻辑
   - 注册并验证
   - 类型检查: `npx tsc --noEmit --project src/tsconfig.json`

3. **MCP Server 层** ([packages/vscode-mcp-server/](mdc:packages/vscode-mcp-server/))
   - 实现工具并复用 Schema
   - 在服务器中注册
   - 类型检查: `npx tsc --noEmit --project tsconfig.json`

## 安全考虑

- **本地通信**: Unix socket 本地设计，仅限本地使用
- **文件权限**: Socket 文件仅限当前用户访问
- **无认证**: 简化的本地开发设计，无需认证
- **进程隔离**: 每个 VSCode 窗口创建自己的 socket
- **Schema 验证**: 输入/输出验证防止注入攻击

## 使用示例

### 基本工具使用

```json
{
  "workspace_path": "/path/to/workspace",
  "uri": "file:///path/to/file.ts",
  "line": 10,
  "character": 5
}
```

### 错误处理

工具提供详细的错误信息：

- **连接错误**: Socket 连接失败
- **验证错误**: Schema 验证失败，包含字段详情
- **VSCode 错误**: 扩展操作失败
- **超时错误**: 请求超时处理

## 性能考虑

- **批量操作**: 大部分工具支持批量处理
- **连接复用**: EventDispatcher 高效管理 socket 连接
- **后台加载**: 文件可以在不显示编辑器的情况下加载
- **Schema 验证**: 快速 Zod 验证确保类型安全
- **工作区定位**: 高效的多窗口支持

## 故障排除

### 常见问题

1. **类型错误**: 确保在 Schema 变更后构建 IPC 包
2. **未知方法**: 检查服务在所有层中的注册情况
3. **连接失败**: 验证工作区路径和 socket 权限
4. **Schema 验证**: 检查参数类型是否符合 Schema 定义

### 调试信息

- **扩展日志**: VSCode 输出面板 → "VSCode MCP Bridge"
- **Socket 路径**: 检查每个工作区生成的 socket 路径
- **服务注册**: 验证所有服务是否正确注册
