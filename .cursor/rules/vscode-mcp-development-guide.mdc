---
description: VSCode MCP 工具开发指南，包含开发流程、架构、步骤、质量标准和最佳实践
globs: packages/vscode-mcp-ipc/src/**/*,packages/vscode-mcp-bridge/src/**/*,packages/vscode-mcp-server/src/**/*
---

# VSCode MCP 工具开发指南

本指南总结了在 VSCode MCP Bridge 项目中开发和维护工具的完整流程，包括从基础实现到质量优化的全套最佳实践。

## 开发流程

### 核心原则

**开发顺序**：

```plaintext
接口定义 (IPC) → 实现层 (Extension) → 工具层 (MCP Server) → 质量优化
```

**为什么要按这个顺序？**

- IPC 层定义了类型契约，必须最先完成
- Extension 层依赖 IPC 的类型定义
- MCP Server 层调用 Extension 的服务
- 质量优化确保符合 MCP 官方标准

**重要提醒**: 每个开发阶段完成后，都必须进行 **编译和构建验证**，确保代码质量和依赖关系正确。

## 工具架构

### 三层架构

```plaintext
MCP Client ↔ MCP Server ↔ IPC Layer ↔ VSCode Extension ↔ VSCode API
```

**职责分工**：

- **IPC Layer**: 定义类型契约和通信协议
- **Extension Layer**: 实现具体的 VSCode 操作逻辑
- **MCP Server Layer**: 提供标准化的 MCP 工具接口

## 开发步骤

### 1. IPC 层：定义接口

#### 1.1 创建事件定义文件

在 [packages/vscode-mcp-ipc/src/events/](mdc:packages/vscode-mcp-ipc/src/events/) 目录中创建事件定义文件：

```typescript
// packages/vscode-mcp-ipc/src/events/your-tool.ts
import { z } from 'zod';

export const YourToolInputSchema = z
  .object({
    param1: z.string().describe('参数描述'),
    param2: z.boolean().optional().default(true).describe('可选参数'),
  })
  .strict();

export const YourToolOutputSchema = z
  .object({
    result: z.string().describe('结果描述'),
  })
  .strict();

export type YourToolPayload = z.infer<typeof YourToolInputSchema>;
export type YourToolResult = z.infer<typeof YourToolOutputSchema>;
```

#### 1.2 注册到事件映射

更新 [packages/vscode-mcp-ipc/src/events/index.ts](mdc:packages/vscode-mcp-ipc/src/events/index.ts)：

```typescript
import type { YourToolPayload, YourToolResult } from './your-tool.js';

export * from './your-tool.js';

export interface EventMap {
  yourTool: {
    params: YourToolPayload;
    result: YourToolResult;
  };
}
```

#### 1.3 构建 IPC 包

```bash
cd packages/vscode-mcp-ipc && npm run build
```

### 2. Extension 层：实现服务

#### 2.1 创建服务实现

在 [packages/vscode-mcp-bridge/src/services/](mdc:packages/vscode-mcp-bridge/src/services/) 目录中实现服务：

```typescript
// packages/vscode-mcp-bridge/src/services/your-tool.ts
import type { EventParams, EventResult } from '@vscode-mcp/vscode-mcp-ipc';

export const yourTool = async (
  payload: EventParams<'yourTool'>,
): Promise<EventResult<'yourTool'>> => {
  try {
    const result = await someVSCodeOperation(payload.param1);
    return { result };
  } catch (error) {
    throw new Error(`操作失败: ${error}`);
  }
};
```

#### 2.2 注册服务

更新 [packages/vscode-mcp-bridge/src/extension.ts](mdc:packages/vscode-mcp-bridge/src/extension.ts)：

```typescript
import { YourToolInputSchema, YourToolOutputSchema } from '@vscode-mcp/vscode-mcp-ipc';
import { yourTool } from './services';

socketServer.register('yourTool', {
  handler: yourTool,
  payloadSchema: YourToolInputSchema,
  resultSchema: YourToolOutputSchema,
});
```

### 3. MCP Server 层：创建工具

#### 3.1 创建工具文件

在 [packages/vscode-mcp-server/src/tools/](mdc:packages/vscode-mcp-server/src/tools/) 目录中实现工具：

```typescript
// packages/vscode-mcp-server/src/tools/your-tool.ts
import type { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { createDispatcher, YourToolInputSchema } from '@vscode-mcp/vscode-mcp-ipc';
import { z } from 'zod';
import { formatToolCallError } from './utils.js';

const inputSchema = {
  workspace_path: z.string().describe('VSCode workspace path to target'),
  ...YourToolInputSchema.shape,
};

export function registerYourTool(server: McpServer) {
  server.registerTool(
    'your_tool',
    {
      title: 'Your Tool Title',
      description: 'Detailed description with usage scenarios and examples',
      inputSchema,
      annotations: {
        title: 'Your Tool Title',
        readOnlyHint: true,
        destructiveHint: false,
        idempotentHint: true,
        openWorldHint: false,
      },
    },
    async ({ workspace_path, param1, param2 }) => {
      try {
        const dispatcher = createDispatcher(workspace_path);
        const result = await dispatcher.dispatch('yourTool', { param1, param2 });

        return {
          content: [
            {
              type: 'text' as const,
              text: `✅ 操作成功: ${result.result}`,
            },
          ],
        };
      } catch (error) {
        return formatToolCallError('Your Tool Title', error);
      }
    },
  );
}
```

## 质量标准

### 错误处理标准

遵循 MCP 官方错误处理规范，使用统一的错误处理函数：

```typescript
// packages/vscode-mcp-server/src/tools/utils.ts
export function formatToolCallError(toolName: string, error: unknown) {
  return {
    isError: true, // MCP 官方要求
    content: [
      {
        type: 'text' as const,
        text: `❌ ${toolName} failed: ${String(error)}`,
      },
    ],
  };
}
```

### Tool Annotations 标准

根据 MCP 官方规范配置：

| Annotation        | 类型    | 默认值 | 描述               |
| ----------------- | ------- | ------ | ------------------ |
| `title`           | string  | -      | 人性化标题         |
| `readOnlyHint`    | boolean | false  | 是否只读操作       |
| `destructiveHint` | boolean | true   | 是否可能破坏性操作 |
| `idempotentHint`  | boolean | false  | 是否幂等操作       |
| `openWorldHint`   | boolean | true   | 是否与外部世界交互 |

## 最佳实践

### 1. 命名规范

- **事件名**: camelCase (`getDiagnostics`, `openFiles`)
- **工具名**: snake_case (`get_diagnostics`, `open_files`)
- **文件名**: kebab-case (`get-diagnostics.ts`, `open-files.ts`)

### 2. 错误处理

- 统一使用 `formatToolCallError` 函数
- 必须设置 `isError: true`
- 提供有意义的错误信息

### 3. Schema 设计

- 使用 `.describe()` 为所有参数添加描述
- 设置合理的默认值
- 使用 `.strict()` 确保类型安全
- MCP 工具层必须复用 IPC 层的 Schema

### 4. 构建验证

每个开发阶段完成后必须进行验证：

```bash
# IPC 层
cd packages/vscode-mcp-ipc && npm run build

# Extension 层
cd packages/vscode-mcp-bridge && npm run compile:test

# MCP Server 层
cd packages/vscode-mcp-server && npm run build
```

## 开发检查清单

### 新工具开发

**基础实现:**

- [ ] 在 IPC 层定义 Schema 和类型
- [ ] 添加到 EventMap 并导出
- [ ] 构建 IPC 包
- [ ] 实现 Extension 服务逻辑
- [ ] 在 Extension 中注册服务
- [ ] Extension 层编译验证
- [ ] 创建 MCP 工具实现（正确复用 IPC Schema）
- [ ] 导出并注册 MCP 工具
- [ ] MCP Server 层构建

**质量优化:**

- [ ] 添加统一错误处理
- [ ] 配置合适的 Tool Annotations
- [ ] 优化 Description
- [ ] 验证符合 MCP 官方标准

**验证测试:**

- [ ] 编译检查所有包
- [ ] 功能测试验证
- [ ] 错误处理测试
- [ ] LLM 使用效果验证

## 常见问题解决

### 问题 1: 类型错误

**症状**: `Property 'xxx' does not exist on type`

**解决方案**:

1. 确保已构建 IPC 包: `cd packages/vscode-mcp-ipc && npm run build`
2. 检查事件是否已添加到 `EventMap`
3. 确保导入了正确的类型

### 问题 2: Schema 重复定义

**症状**: MCP 工具层重新定义了 IPC 层已有的参数

**解决方案**: 正确复用 IPC 层的 Schema

```typescript
// ❌ 错误：重新定义参数
const inputSchema = {
  workspace_path: z.string(),
  uri: z.string(),
  line: z.number(),
};

// ✅ 正确：复用 IPC 层的 Schema
import { GetDefinitionInputSchema } from '@vscode-mcp/vscode-mcp-ipc';

const inputSchema = {
  workspace_path: z.string().describe('VSCode workspace path to target'),
  ...GetDefinitionInputSchema.shape,
};
```

### 问题 3: 带验证的 Schema 无法复用

**症状**: 使用 `.refine()` 的 Schema 变成 `ZodEffects` 类型，没有 `.shape` 属性

**解决方案**: 分离基础 Schema 和验证 Schema

```typescript
// IPC 层：分离基础 Schema 和验证 Schema
export const YourToolBaseInputSchema = z
  .object({
    param1: z.string().describe('参数1'),
    param2: z.string().optional().describe('参数2'),
  })
  .strict();

export const YourToolInputSchema = YourToolBaseInputSchema.refine(
  (data) => {
    return data.param1 && data.param2;
  },
  { message: '验证失败' },
);

// MCP Server 层：复用基础 Schema
import { YourToolBaseInputSchema } from '@vscode-mcp/vscode-mcp-ipc';

const inputSchema = {
  workspace_path: z.string().describe('VSCode workspace path to target'),
  ...YourToolBaseInputSchema.shape,
};
```

遵循这个指南可以确保工具开发的一致性、可维护性和符合 MCP 官方标准。
